# ============================================================================
# STEWARD CI/CD PIPELINE (see STEWARD_MASTER_SYSTEM_GUIDE.md - CI/CD Pipeline)
# ============================================================================
# Automated testing, quality checks, and deployment to Vercel
# Runs on: push to main, pull requests, and manual triggers

name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch: # Allow manual triggers

env:
  NODE_VERSION: '22.14.0'
  PNPM_VERSION: '8'

jobs:
  # ============================================================================
  # QUALITY ASSURANCE (see master guide: Testing and Quality Assurance)
  # ============================================================================
  quality-assurance:
    name: Quality Assurance
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Validate Node.js environment
        run: |
          echo "Node.js version: $(node --version)"
          echo "Node.js architecture: $(node -p 'process.arch')"
          echo "Platform: $(node -p 'process.platform')"
          
          # Validate Node.js architecture for Apple Silicon compatibility
          if [[ "$(node -p 'process.arch')" == "arm64" && "$(node -p 'process.platform')" == "darwin" ]]; then
            echo "‚úÖ ARM64 Node.js detected on macOS - Apple Silicon compatible"
          elif [[ "$(node -p 'process.arch')" == "x64" ]]; then
            echo "‚úÖ x64 Node.js detected - Standard architecture"
          else
            echo "‚ö†Ô∏è  Unexpected Node.js architecture: $(node -p 'process.arch')"
          fi
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run linting
        run: npm run lint
        
      - name: Run type checking
        run: npm run type-check
        
      - name: Run tests with coverage
        run: npm run test:ci
        
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  # ============================================================================
  # SECURITY SCAN (see master guide: Security Requirements)
  # ============================================================================
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: quality-assurance
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run security audit
        run: npm audit --audit-level=moderate

  # ============================================================================
  # BUILD VERIFICATION (see master guide: DevOps and Deployment)
  # ============================================================================
  build-verification:
    name: Build Verification
    runs-on: ubuntu-latest
    needs: [quality-assurance, security-scan]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Validate Node.js environment
        run: |
          echo "Node.js version: $(node --version)"
          echo "Node.js architecture: $(node -p 'process.arch')"
          echo "Platform: $(node -p 'process.platform')"
          
          # Validate Node.js architecture for Apple Silicon compatibility
          if [[ "$(node -p 'process.arch')" == "arm64" && "$(node -p 'process.platform')" == "darwin" ]]; then
            echo "‚úÖ ARM64 Node.js detected on macOS - Apple Silicon compatible"
          elif [[ "$(node -p 'process.arch')" == "x64" ]]; then
            echo "‚úÖ x64 Node.js detected - Standard architecture"
          else
            echo "‚ö†Ô∏è  Unexpected Node.js architecture: $(node -p 'process.arch')"
          fi
          
      - name: Install dependencies
        run: npm ci
        
      - name: Generate Prisma client
        run: npx prisma generate
        
      - name: Build application
        run: npm run build

  # ============================================================================
  # DEPLOYMENT (see master guide: DevOps and Deployment)
  # ============================================================================
  deployment-gate:
    name: Deployment Gate
    runs-on: ubuntu-latest
    needs: [quality-assurance, security-scan, build-verification]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Create deployment status
        run: |
          echo "All quality gates passed!"
          echo "‚úÖ Linting: PASSED"
          echo "‚úÖ Type checking: PASSED"
          echo "‚úÖ Tests: PASSED"
          echo "‚úÖ Security scan: PASSED"
          echo "‚úÖ Build: PASSED"
          echo "üöÄ Ready for deployment to production"

      - name: Create deployment protection status
        id: deployment-status
        run: |
          echo "status=success" >> $GITHUB_OUTPUT
          echo "message=All quality gates passed - ready for deployment" >> $GITHUB_OUTPUT

      - name: Create deployment status check
        uses: actions/github-script@v7
        with:
          script: |
            const { data: deployment } = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: 'production',
              description: 'Production deployment',
              auto_merge: false,
              required_contexts: ['quality-assurance', 'security-scan', 'build-verification']
            });
            
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deployment.id,
              state: 'success',
              description: 'All quality gates passed - deployment approved'
            });
            
            console.log('Deployment status created successfully');

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: deployment-gate
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: ${{ steps.deploy.outputs.url }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Vercel
        id: deploy
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'

      - name: Comment deployment URL
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `üöÄ **Production Deployment Successful!**
              
              **Deployment URL:** ${{ steps.deploy.outputs.url }}
              **Environment:** Production
              **Commit:** ${context.sha}
              
              All quality gates passed:
              ‚úÖ Code quality checks
              ‚úÖ Security scan
              ‚úÖ Test coverage
              ‚úÖ Build verification
              
              Deployment completed at: ${new Date().toISOString()}`
            });

  # ============================================================================
  # PREVIEW DEPLOYMENT (see master guide: DevOps and Deployment)
  # ============================================================================
  preview-deployment:
    name: Preview Deployment
    runs-on: ubuntu-latest
    needs: [quality-assurance, security-scan, build-verification]
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Vercel (Preview)
        id: deploy-preview
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}

      - name: Comment preview URL
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `üîç **Preview Deployment Ready!**
              
              **Preview URL:** ${{ steps.deploy-preview.outputs.url }}
              **Environment:** Preview
              **Commit:** ${context.sha}
              
              All quality gates passed:
              ‚úÖ Code quality checks
              ‚úÖ Security scan
              ‚úÖ Test coverage
              ‚úÖ Build verification
              
              Preview deployed at: ${new Date().toISOString()}`
            });

# ============================================================================
# WORKFLOW COMPLETION NOTIFICATION
# ============================================================================
  notify:
    name: Workflow Notification
    runs-on: ubuntu-latest
    needs: [quality-assurance, build-verification, security-scan]
    if: always() && github.event_name == 'push'
    
    steps:
      - name: Workflow status
        run: |
          if [ "${{ needs.quality-assurance.result }}" == "success" ] && \
             [ "${{ needs.build-verification.result }}" == "success" ]; then
            echo "‚úÖ All checks passed! Ready for deployment."
          else
            echo "‚ùå Some checks failed. Please review the logs."
            exit 1
          fi 