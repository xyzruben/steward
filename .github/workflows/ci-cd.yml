name: Simplified CI/CD - "Just Right" Testing

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '22.14.0'
  PNPM_VERSION: '8'

jobs:
  quality-assurance:
    name: Quality Assurance
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Validate Node.js environment
        run: |
          echo "Node.js version: $(node --version)"
          echo "Node.js architecture: $(node -p 'process.arch')"
          echo "Platform: $(node -p 'process.platform')"
          
          # Validate Node.js architecture for Apple Silicon compatibility
          if [[ "$(node -p 'process.arch')" == "arm64" && "$(node -p 'process.platform')" == "darwin" ]]; then
            echo "✅ ARM64 Node.js detected on macOS - Apple Silicon compatible"
          elif [[ "$(node -p 'process.arch')" == "x64" ]]; then
            echo "✅ x64 Node.js detected - Standard architecture"
          else
            echo "⚠️ Unexpected architecture: $(node -p 'process.arch') on $(node -p 'process.platform')"
          fi
          
      - name: Install dependencies
        run: npm ci
        
      - name: Lint code
        run: npm run lint
        
      - name: Type check
        run: npm run type-check
        
      - name: Run critical tests only
        run: |
          echo "Running simplified test suite for deployment stability"
          echo "Focusing on critical user-facing functionality only"
          npm test -- --testPathPattern="ReceiptUpload|LoginForm|ErrorBoundary|PageTransition" --passWithNoTests --maxWorkers=2 --coverage --coverageReporters=text
          
      - name: Build verification
        run: npm run build
        
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run security audit
        run: npm audit --audit-level=moderate
        
  build-verification:
    name: Build Verification
    runs-on: ubuntu-latest
    needs: [quality-assurance, security-scan]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Validate Node.js environment
        run: |
          echo "Node.js version: $(node --version)"
          echo "Node.js architecture: $(node -p 'process.arch')"
          echo "Platform: $(node -p 'process.platform')"
          
          # Validate Node.js architecture for Apple Silicon compatibility
          if [[ "$(node -p 'process.arch')" == "arm64" && "$(node -p 'process.platform')" == "darwin" ]]; then
            echo "✅ ARM64 Node.js detected on macOS - Apple Silicon compatible"
          elif [[ "$(node -p 'process.arch')" == "x64" ]]; then
            echo "✅ x64 Node.js detected - Standard architecture"
          else
            echo "⚠️ Unexpected architecture: $(node -p 'process.arch') on $(node -p 'process.platform')"
          fi
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build application
        run: npm run build
        
      - name: Verify build output
        run: |
          echo "Verifying build artifacts..."
          ls -la .next/
          echo "Build verification complete"
          
  deployment:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [quality-assurance, security-scan, build-verification]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build for production
        run: npm run build
        
      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod' 