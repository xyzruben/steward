# ============================================================================
# STEWARD CI/CD PIPELINE (see STEWARD_MASTER_SYSTEM_GUIDE.md - CI/CD Pipeline)
# ============================================================================
# Automated testing, quality checks, and deployment to Vercel
# Runs on: push to main, pull requests, and manual triggers

name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch: # Allow manual triggers

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8'

jobs:
  # ============================================================================
  # QUALITY ASSURANCE (see master guide: Testing and Quality Assurance)
  # ============================================================================
  quality-check:
    name: Quality Assurance
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: TypeScript type checking
        run: npx tsc --noEmit
        
      - name: ESLint check
        run: npm run lint
        
      - name: Run unit tests
        run: npm test
        env:
          # Test environment variables
          NODE_ENV: test
          # Mock external services for tests
          GOOGLE_CLOUD_PROJECT: test-project
          OPENAI_API_KEY: test-key
          SUPABASE_URL: https://test.supabase.co
          SUPABASE_ANON_KEY: test-key
          
      - name: Test coverage report
        run: npm run test:coverage
        continue-on-error: true # Don't fail build on coverage thresholds
        
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
        continue-on-error: true # Optional coverage reporting

  # ============================================================================
  # BUILD VERIFICATION (see master guide: DevOps and Deployment)
  # ============================================================================
  build-verification:
    name: Build Verification
    runs-on: ubuntu-latest
    needs: quality-check
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build application
        run: npm run build
        env:
          # Build-time environment variables
          NODE_ENV: production
          # Use test values for build verification
          GOOGLE_CLOUD_PROJECT: test-project
          OPENAI_API_KEY: test-key
          SUPABASE_URL: https://test.supabase.co
          SUPABASE_ANON_KEY: test-key
          SUPABASE_SERVICE_ROLE_KEY: test-key
          # Temporarily disable ESLint for build verification
          DISABLE_ESLINT_PLUGIN: true
          
      - name: Verify build artifacts
        run: |
          echo "Checking build output..."
          ls -la .next/
          echo "Build verification complete"

  # ============================================================================
  # SECURITY SCAN (see master guide: Security Requirements)
  # ============================================================================
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: quality-check
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run security audit
        run: npm audit --audit-level=moderate
        continue-on-error: true # Don't fail build on moderate issues
        
      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high
        continue-on-error: true # Optional security scanning

  # ============================================================================
  # DEPLOYMENT (see master guide: DevOps and Deployment)
  # ============================================================================
  deploy:
    name: Deploy to Vercel
    runs-on: ubuntu-latest
    needs: [quality-check, build-verification]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
        
      - name: Deploy notification
        run: |
          echo "üöÄ Deployment to Vercel completed successfully!"
          echo "Production URL: https://steward.vercel.app"

  # ============================================================================
  # PREVIEW DEPLOYMENT (see master guide: DevOps and Deployment)
  # ============================================================================
  preview-deploy:
    name: Preview Deployment
    runs-on: ubuntu-latest
    needs: [quality-check, build-verification]
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Deploy to Vercel Preview
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--target=preview'
        
      - name: Comment PR with preview URL
        uses: actions/github-script@v7
        with:
          script: |
            const { data: deployments } = await github.rest.repos.listDeployments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: 'preview'
            });
            
            if (deployments.length > 0) {
              const deployment = deployments[0];
              const previewUrl = `https://${deployment.environment_url}`;
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: `üéâ **Preview deployment ready!**\n\nüîó **Preview URL:** ${previewUrl}\n\nThis preview will be automatically updated with each push to this PR.`
              });
            }

# ============================================================================
# WORKFLOW COMPLETION NOTIFICATION
# ============================================================================
  notify:
    name: Workflow Notification
    runs-on: ubuntu-latest
    needs: [quality-check, build-verification, security-scan]
    if: always() && github.event_name == 'push'
    
    steps:
      - name: Workflow status
        run: |
          if [ "${{ needs.quality-check.result }}" == "success" ] && \
             [ "${{ needs.build-verification.result }}" == "success" ]; then
            echo "‚úÖ All checks passed! Ready for deployment."
          else
            echo "‚ùå Some checks failed. Please review the logs."
            exit 1
          fi 