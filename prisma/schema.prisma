// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================================================
// USER MODEL
// ============================================================================
// Maps to Supabase Auth users with UUID primary key
// Designed for Row Level Security (RLS) integration
model User {
  id        String    @id @db.Uuid
  email     String    @unique
  name      String?
  avatarUrl String?
  
  // Timestamps
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  // Relations
  receipts  Receipt[]
  notifications Notification[]
  notificationPreferences NotificationPreferences?
  savedSearches SavedSearch[]
  
  // Supabase Auth integration
  // The id field will be synced with Supabase Auth users
  // This allows for seamless RLS integration
  
  @@map("users")
}

// ============================================================================
// RECEIPT MODEL
// ============================================================================
// Core receipt data with AI-powered analysis
model Receipt {
  id           String   @id @default(uuid()) @db.Uuid
  
  // Foreign key to User (Supabase Auth)
  userId       String   @db.Uuid
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Receipt data
  imageUrl     String   // URL to stored receipt image
  rawText      String   // OCR-extracted text
  merchant     String   // Store/merchant name
  total        Decimal  @db.Decimal(10, 2) // Currency amount with 2 decimal places
  purchaseDate DateTime // Date of purchase
  
  // AI-generated content
  summary      String?  // AI-generated summary of the receipt
  
  // Analytics and categorization fields (see master guide: Database Schema Design)
  category     String?  // AI-categorized spending category (e.g., "Food & Dining", "Transportation")
  subcategory  String?  // More specific subcategory (e.g., "Restaurants", "Gas Stations")
  confidenceScore Decimal? @db.Decimal(3, 2) // AI confidence score (0.00-1.00)
  
  // Metadata
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Indexes for performance (see master guide: Indexing Strategy)
  @@index([userId])
  @@index([purchaseDate])
  @@index([merchant])
  @@index([category]) // New index for analytics queries
  @@index([userId, purchaseDate]) // Composite index for user date range queries
  @@index([userId, category]) // Composite index for user category analysis
  
  @@map("receipts")
}

// ============================================================================
// NOTIFICATION MODEL (see master guide: Database Schema Design)
// ============================================================================
// User notifications with real-time support
model Notification {
  id        String   @id @default(uuid()) @db.Uuid
  
  // Foreign key to User (Supabase Auth)
  userId    String   @db.Uuid
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Notification data
  type      String   // Notification type (receipt_uploaded, analytics_updated, etc.)
  title     String   // Notification title
  message   String   // Notification message
  metadata  Json?    // Additional metadata as JSON
  isRead    Boolean  @default(false)
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Indexes for performance (see master guide: Indexing Strategy)
  @@index([userId])
  @@index([type])
  @@index([isRead])
  @@index([createdAt])
  @@index([userId, isRead]) // Composite index for unread notifications
  @@index([userId, type]) // Composite index for notification type filtering
  @@index([userId, createdAt]) // Composite index for chronological queries
  
  @@map("notifications")
}

// ============================================================================
// NOTIFICATION PREFERENCES MODEL (see master guide: Database Schema Design)
// ============================================================================
// User notification preferences and settings
model NotificationPreferences {
  id                  String   @id @default(uuid()) @db.Uuid
  
  // Foreign key to User (Supabase Auth)
  userId              String   @unique @db.Uuid
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Notification type preferences
  emailNotifications  Boolean  @default(true)
  pushNotifications   Boolean  @default(true)
  receiptUploads      Boolean  @default(true)
  receiptProcessing   Boolean  @default(true)
  analyticsUpdates    Boolean  @default(true)
  searchSuggestions   Boolean  @default(true)
  systemAlerts        Boolean  @default(true)
  exportNotifications Boolean  @default(true)
  backupNotifications Boolean  @default(true)
  
  // Timestamps
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  @@map("notification_preferences")
}

// ============================================================================
// SAVED SEARCH MODEL (see master guide: Database Schema Design)
// ============================================================================
// User's saved search queries and filters
model SavedSearch {
  id        String   @id @default(uuid()) @db.Uuid
  
  // Foreign key to User (Supabase Auth)
  userId    String   @db.Uuid
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Search data
  name      String   // User-friendly name for the search
  query     String   // Search query string
  filters   Json     // Search filters as JSON object
  
  // Usage tracking
  useCount  Int      @default(1)
  lastUsed  DateTime @default(now())
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Indexes for performance
  @@index([userId])
  @@index([lastUsed])
  @@index([userId, lastUsed]) // Composite index for user's recent searches
  
  @@map("saved_searches")
}

// ============================================================================
// FUTURE EXTENSIONS (Commented for reference)
// ============================================================================
// These models can be uncommented and implemented as needed

// model Category {
//   id          String    @id @default(cuid()) @db.Uuid
//   name        String
//   color       String?   // Hex color for UI
//   userId      String    @db.Uuid
//   user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
//   receipts    Receipt[]
//   createdAt   DateTime  @default(now())
//   updatedAt   DateTime  @updatedAt
//   
//   @@unique([name, userId])
//   @@map("categories")
// }

// model Tag {
//   id        String    @id @default(cuid()) @db.Uuid
//   name      String
//   userId    String    @db.Uuid
//   user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
//   receipts  Receipt[]
//   createdAt DateTime  @default(now())
//   updatedAt DateTime  @updatedAt
//   
//   @@unique([name, userId])
//   @@map("tags")
// }

// model ReceiptTag {
//   receiptId String  @db.Uuid
//   tagId     String  @db.Uuid
//   receipt   Receipt @relation(fields: [receiptId], references: [id], onDelete: Cascade)
//   tag       Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)
//   
//   @@id([receiptId, tagId])
//   @@map("receipt_tags")
// }
