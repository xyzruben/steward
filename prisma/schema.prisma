generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String                   @id @db.Uuid
  email                   String                   @unique
  name                    String?
  avatarUrl               String?
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  notificationPreferences NotificationPreferences?
  notifications           Notification[]
  receipts                Receipt[]
  savedSearches           SavedSearch[]
  userProfile             UserProfile?

  @@map("users")
}

model UserProfile {
  id                        String   @id @default(uuid()) @db.Uuid
  userId                    String   @unique @db.Uuid
  firstName                 String?
  lastName                  String?
  phone                     String?
  timezone                  String   @default("UTC")
  currency                  String   @default("USD")
  locale                    String   @default("en-US")
  dateFormat                String   @default("MM/DD/YYYY")
  timeFormat                String   @default("12h")
  theme                     String   @default("system")
  compactMode               Boolean  @default(false)
  defaultExportFormat       String   @default("csv")
  includeAnalyticsByDefault Boolean  @default(false)
  exportDateRange           String   @default("30d")
  dataRetentionDays         Int      @default(2555)
  allowDataAnalytics        Boolean  @default(true)
  shareUsageData            Boolean  @default(false)
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt
  user                      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_profiles")
}

model ReceiptEmbedding {
  id        String   @id @default(uuid()) @db.Uuid
  receiptId String   @unique @db.Uuid
  embedding Float[]
  content   String
  model     String   @default("text-embedding-3-small")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  receipt   Receipt  @relation(fields: [receiptId], references: [id], onDelete: Cascade)

  @@index([receiptId])
  @@index([model])
  @@map("receipt_embeddings")
}

model Receipt {
  id                String            @id @default(uuid()) @db.Uuid
  userId            String            @db.Uuid
  imageUrl          String
  rawText           String
  merchant          String
  total             Decimal           @db.Decimal(10, 2)
  purchaseDate      DateTime
  summary           String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  category          String?
  confidenceScore   Decimal?          @db.Decimal(3, 2)
  subcategory       String?
  convertedCurrency String?
  convertedTotal    Decimal?
  currency          String            @default("USD")
  embedding         ReceiptEmbedding?
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([purchaseDate])
  @@index([merchant])
  @@index([category])
  @@index([userId, purchaseDate])
  @@index([userId, category])
  @@map("receipts")
}

model Notification {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @db.Uuid
  type      String
  title     String
  message   String
  metadata  Json?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([type])
  @@index([isRead])
  @@index([createdAt])
  @@index([userId, isRead])
  @@index([userId, type])
  @@index([userId, createdAt])
  @@map("notifications")
}

model NotificationPreferences {
  id                  String   @id @default(uuid()) @db.Uuid
  userId              String   @unique @db.Uuid
  emailNotifications  Boolean  @default(true)
  pushNotifications   Boolean  @default(true)
  receiptUploads      Boolean  @default(true)
  receiptProcessing   Boolean  @default(true)
  analyticsUpdates    Boolean  @default(true)
  searchSuggestions   Boolean  @default(true)
  systemAlerts        Boolean  @default(true)
  exportNotifications Boolean  @default(true)
  backupNotifications Boolean  @default(true)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notification_preferences")
}

model SavedSearch {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @db.Uuid
  name      String
  query     String
  filters   Json
  useCount  Int      @default(1)
  lastUsed  DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([lastUsed])
  @@index([userId])
  @@index([userId, lastUsed])
  @@map("saved_searches")
}
